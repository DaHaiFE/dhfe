(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{334:function(e,a,n){"use strict";n.r(a);var t=n(1),s=Object(t.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var e=this,a=e.$createElement,n=e._self._c||a;return n("div",{staticClass:"content"},[n("p",[e._v("前言——webpack现在已成为前端自动化、模块化不可或缺的一款工具，我们可以把它看做是一种模块打包机，它来分析你的项目结构、找到JS模块以及一些浏览器不能直接运行的拓展语言（如SASS、LESS等），然后将其打包为合适的格式供浏览器使用......")]),n("p",[e._v("首先要确保你的计算机安装了"),n("a",{attrs:{href:"https://nodejs.org/en/",target:"_blank",rel:"noopener noreferrer"}},[e._v("nodeJS")]),e._v("然后我们就可以开始我们的webpack之路了~~~先来按照如下步骤创建个项目吧：\n")]),n("h3",{attrs:{id:"_1-初始化package-json文件"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-初始化package-json文件","aria-hidden":"true"}},[e._v("#")]),e._v(" 1. 初始化package.json文件")]),n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("npm init -y\n")])]),n("h3",{attrs:{id:"_2-下载webpack-在4-0版本需要下载两个包webpack和webpack-cli-d的意思是开发环境依赖"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-下载webpack-在4-0版本需要下载两个包webpack和webpack-cli-d的意思是开发环境依赖","aria-hidden":"true"}},[e._v("#")]),e._v(" 2. 下载webpack,在4.0版本需要下载两个包webpack和webpack-cli(-D的意思是开发环境依赖)")]),n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("npm install webpack webpack-cli -D\n")])]),n("h3",{attrs:{id:"_3-这里插一句，在下面的步骤中童鞋们不要忘记install依赖的模块和插件哦！"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-这里插一句，在下面的步骤中童鞋们不要忘记install依赖的模块和插件哦！","aria-hidden":"true"}},[e._v("#")]),e._v(" 3. 这里插一句，在下面的步骤中童鞋们不要忘记install依赖的模块和插件哦！")]),n("h3",{attrs:{id:"_4-创建一个webpack配置文件webpack-config-js"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-创建一个webpack配置文件webpack-config-js","aria-hidden":"true"}},[e._v("#")]),e._v(" 4. 创建一个webpack配置文件webpack.config.js")]),n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("const path = require('path');\nmodule.exports = {\n    entry:'',\n    output:{\n\n    },\n    module:{\n\n    },\n    plugins:{\n\n    },\n    devServer:{\n        \n    }\n}\n")])]),n("p",[e._v("这里先说下几个核心的配置")]),n("ul",[n("li",[e._v("entry：入口；这是使用webpack的第一步，定义一个入口文件，相当于输入（单个或多个）")]),n("li",[e._v("output:出口；也就是打包后文件输出到哪里，可以是定义一个文件也可以定义一个目录；path：定义一个路径（绝对路径） filename:打包后的文件名；假如是多个入口文件我们应该这样写：filename:'[name].[hash].js'")])]),n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("entry:'../main.js',\noutput:{\n    path:path.join(__dirname,'../dist'),\n    filename:'bundle.js'\n},\n")])]),n("ul",[n("li",[e._v("loader：模块转换器；来把以前的模块内容转换为新的JS内容靠的就是loader")]),n("li",[e._v("module：在这里配置模块规则，webpack打包模块靠的就是这里定义的模块规则,我们在module中配置一些规则rules，这里暂且以转换CSS文件为例：")])]),n("p",[e._v("(1) test:这里是一个正则用于匹配转换的文件(这里是以.css后缀结尾的文件)")]),n("p",[e._v("(2) loader:如果你只需要一个loader来处理那么就传一个字符串，如果有多个则写一个数组（这里需要两个css-loader解析css里的路径如背景图路径等等，style-loader用来把css文件内容变为style标签并插入）转换的时候是按数组从右往左去转换的。")]),n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("module:{\n    rules:[\n        {\n            test:/\\.css$/,\n            loader:['style-loader','css-loader']\n        }\n    ]\n}\n")])]),n("ul",[n("li",[e._v("plugins：插件；webpack打包会有各种各样的事件，通过注册插件来处理这些事件，在构建流程中的特定时机注入扩展逻辑来做一些事情。这里我们以html-webpack-plugin这个插件为例，用它来根据模板来生成html文件到目标目录下,在配置前不要忘记安装这个插件,同时也不要忘记require这个插件！")])]),n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("npm install html-webpack-plugin -D\n")])]),n("p",[e._v("使用的时候使用new关键字，同时可以传递参数\n(1)template:指定产出的html模板")]),n("p",[e._v("(2)filename:产出html文件名")]),n("p",[e._v("(3)hash:在引入的JS文件加入查询字符串避免缓存")]),n("p",[e._v("(4)minify:压缩")]),n("p",[e._v("我们也可以按需引入其他的变量参数")]),n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("plugins:[\n    new HtmlWebpackPlugin({\n        template:'./src/index.html',\n        filename:'index.html',\n        title:'入门webpack',\n        hash:true,\n        minify:{\n            removeAttributeQuotes:true\n        }\n    })\n]\n")])]),n("ul",[n("li",[e._v("devServer：开发服务器，这里我们来配置下开发服务器用来预览打包后的项目:首先找到package.json添加一个脚本,在scripts下添加")])]),n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('"dev":"webpack-dev-server --open --mode development"\n')])]),n("p",[e._v("这样我们就可以使用npm run dev来启动项目了,我们还需要在webpack.config.js中的devServer中来配置:")]),n("p",[e._v("(1) contentBase:配置静态文件根目录，也就是你打包后的目录\n(2) host:主机(这里使用localhost)\n(3) port:端口(默认8080)\n(4) compress:服务器返回浏览器是否使用gzip压缩(布尔值)")]),n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("devServer:{\n    contentBase:'../dist',\n    host:'localhost',\n    port:'8080',\n    compress:true\n}\n")])]),n("blockquote",[n("p",[e._v("在使用webpack-dev-server启动服务后，会注入一个websocket客户端，主要用来检测到我们修改内容后通知webpack来重新编译并刷新页面。")])]),n("p",[e._v("截止到这里，已经可以配置一个简单的webpack用来打包啦，不过这只是一个入门级的，在实际项目中还远远不够，到这里如果你还有兴趣，请继续往下走~~")]),n("h4",{attrs:{id:"更多的配置"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#更多的配置","aria-hidden":"true"}},[e._v("#")]),e._v(" 更多的配置")]),n("ol",[n("li",[e._v("entry以及output进阶。在项目中我们可能会有这种需求，那就是配置多个入口文件，这就涉及到了一个出口文件的命名问题。")])]),n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("entry: {\n    index: './src/index.js',\n    main:'./src/main.js'\n},\noutput: {\n    path: path.resolve(__dirname, 'dist'),\n    filename: '[name].[hash:8].js',\n}\n")])]),n("p",[e._v("当我们有多入口的时候，出口文件应该像这样命名，并且可以定义一个hash值，并且可以使用冒号加数字来规定hash的长度。\n2. 图片的支持问题。我们可以使用两个loader来处理图片的打包问题，第一个是file-loader来解决CSS等文件中的引入图片路径问题，第二个是url-loader当图片较小的时候会把图片BASE64编码。")]),n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("{\n    test:/\\.(jpg|png|gif|svg)$/,\n    use:'file-loader',\n    include:path.join(__dirname,'./src'),\n}\n")])]),n("ol",{attrs:{start:"3"}},[n("li",[e._v("编译less和sass,这里同样是配置规则来处理；")])]),n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("const cssExtract=new ExtractTextWebpackPlugin('css.css');\nconst lessExtract=new ExtractTextWebpackPlugin('less.css');\nconst sassExtract=new ExtractTextWebpackPlugin('sass.css');\n{\n    test:/\\.less$/,\n    use: lessExtract.extract({\n        use:['css-loader','less-loader']\n    }),\n    include:path.join(__dirname,'./src'),\n    exclude:/node_modules/\n},\n{\n    test:/\\.scss$/,\n    use: sassExtract.extract({\n        use:['css-loader','sass-loader']\n    }),\n    include:path.join(__dirname,'./src'),\n    exclude:/node_modules/\n},\n")])]),n("ol",{attrs:{start:"4"}},[n("li",[e._v("转义ES6和ES7及JSX。我们使用babel来转义：")])]),n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('{\n    test:/\\.jsx?$/,\n    use: {\n        loader: \'babel-loader\',\n        options: {\n            presets: ["env","stage-0","react"]\n        }\n    },\n    include:path.join(__dirname,\'./src\'),\n    exclude:/node_modules/\n},\n')])]),n("ol",{attrs:{start:"5"}},[n("li",[e._v("devServer配置服务器代理，这个在项目中应该是非常常用的了，我们需要配置一个proxy属性，大多数时候我们在开发中处理跨域也需要用这个去请求后台接口:")])]),n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("proxy: {\n    '/api': {\n        target: 'http://172.1.1.1:5000',\n        pathRewrite: {'^/api' : '/api'},\n        changeOrigin: true\n    }\n}\n")])]),n("p",[e._v("target的值就是你要请求的IP地址，可以按需自行配置。\n在进阶中的代码中，有配置loader的地方加了一个exclude属性，这个的作用主要是指定哪些目录下的文件不需要进行loader转换。暂且说这么多吧，一时就想起了这么多，有需要的可以留言一起探讨，下面再介绍些常用的loader和plugin吧~~")]),n("p",[e._v("如有使用vue的项目可以配置如下module规则，不需要的可自行删减")]),n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("module: {\n    rules: [\n        {\n            test: /\\.vue$/,\n            loader: 'vue-loader',\n            options: {\n                loaders: {\n                    css: 'vue-style-loader!css-loader',\n                    less: 'vue-style-loader!css-loader!less-loader'\n                },\n                postLoaders: {\n                    html: 'babel-loader'\n                }\n            }\n        },\n        {\n            test: /iview\\/.*?js$/,\n            loader: 'happypack/loader?id=happybabel',\n            exclude: /node_modules/\n        },\n        {\n            test: /\\.js$/,\n            loader: 'happypack/loader?id=happybabel',\n            exclude: /node_modules/\n        },\n        {\n            test: /\\.js[x]?$/,\n            include: [resolve('src')],\n            exclude: /node_modules/,\n            loader: 'happypack/loader?id=happybabel'\n        },\n        {\n            test: /\\.css$/,\n            use: ExtractTextPlugin.extract({\n                use: ['css-loader?minimize', 'autoprefixer-loader'],\n                fallback: 'style-loader'\n            })\n        },\n        {\n            test: /\\.less$/,\n            use: ExtractTextPlugin.extract({\n                use: ['css-loader?minimize','autoprefixer-loader', 'less-loader'],\n                fallback: 'style-loader'\n            }),\n        },\n        {\n            test: /\\.(gif|jpg|png|woff|svg|eot|ttf)\\??.*$/,\n            loader: 'url-loader?limit=1024'\n        },\n        {\n            test: /\\.(html|tpl)$/,\n            loader: 'html-loader'\n        }\n    ]\n}\n")])]),n("h4",{attrs:{id:"常用plugin简单介绍"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#常用plugin简单介绍","aria-hidden":"true"}},[e._v("#")]),e._v(" 常用plugin简单介绍")]),n("ul",[n("li",[e._v("extract-text-webpack-plugin:此插件用来抽离css样式，假如你的css样式表很大推荐使用这个，以防止打包在js中引起样式错乱.")]),n("li",[n("a",{attrs:{href:"https://www.npmjs.com/package/copy-webpack-plugin",target:"_blank",rel:"noopener noreferrer"}},[e._v("copy-webpack-plugin")]),e._v(":在webpack中拷贝文件和文件夹")]),n("li",[n("a",{attrs:{href:"https://www.npmjs.com/package/clean-webpack-plugin",target:"_blank",rel:"noopener noreferrer"}},[e._v("clean-webpack-plugin")]),e._v(":用于在打包前先清空输出目录")]),n("li",[n("a",{attrs:{href:"https://www.npmjs.com/package/happypack",target:"_blank",rel:"noopener noreferrer"}},[e._v("happypack")]),e._v(":并行转换文件，可以更加快速的构建")]),n("li",[e._v("webpack.optimize.CommonsChunkPlugin:用于提取公共代码")]),n("li",[e._v("webpack.DefinePlugin:用于创建一个可以配置的全局变量，便于开发模式和发布模式的构建")]),n("li",[e._v("webpack.optimize.UglifyJsPlugin:用来压缩你的js代码")])]),n("blockquote",[n("p",[e._v("暂时就写到这里了，可以做一个入门了解，webpack还有好多好多东西....有时间整理下再继续更新~~")])])])}],!1,null,null,null);s.options.__file="webpack-Introduction.md";a.default=s.exports}}]);